package br.com.vendas.controller;

import java.io.IOException;
import java.io.Serializable;

import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.faces.view.ViewScoped;
import javax.inject.Inject;
import javax.inject.Named;

import br.com.vendas.model.CepWebService;
import br.com.vendas.model.Cliente;
import br.com.vendas.model.Contato;
import br.com.vendas.model.Endereco;
import br.com.vendas.model.TipoPessoa;
import br.com.vendas.service.CadastroClienteService;
import br.com.vendas.service.NegocioException;
import br.com.vendas.util.jsf.FacesUtil;

@Named
@ViewScoped
public class CadastroClienteBean implements Serializable
{
	private static final long serialVersionUID = 1L;
	
	@Inject
	private CadastroClienteService cadastroClienteService;
	
	private Cliente cliente;
	
	private Contato contato;
	
	private Endereco endereco;
	
	public CadastroClienteBean()
	{
		this.cliente = new Cliente();
		this.contato = new Contato();
		this.endereco = new Endereco();
	}
	
	 
	@SuppressWarnings("static-access")
	public void encontraCEP() throws IOException 
	 {
		 
		 if(endereco.buscaCep(endereco.getCep()) != null)
		 {
			 endereco.setLogradouro(endereco.getLogradouro());
			 endereco.setCidade(endereco.getCidade());
			 endereco.setBairro(endereco.getBairro());
			 endereco.setUf(endereco.getUf());
		 }
		 
		// CepWebService cepWebService = new CepWebService(endereco.getCep());
	 
	      //  if (cepWebService.getResultado() == 1) {
	            //setTipoLogradouro(cepWebService.getTipoLogradouro());
	        //	endereco.setLogradouro(endereco.getLogradouro());
	        	//endereco.setUf(endereco.getUf());
	        	//endereco.setCidade(endereco.getCidade());
	        	//endereco.setBairro(endereco.getBairro());
	        //} else {
	 
	          //  FacesContext.getCurrentInstance().addMessage(
	            //        null,
	              //      new FacesMessage(FacesMessage.SEVERITY_ERROR,
	                //            "Servidor não está respondendo",
	                  //          "Servidor não está respondendo"));
	        //}
	    }
	
	public void salvar()
	{
		try 
		{
			this.cadastroClienteService.salvar(cliente);
			FacesUtil.addInfoMessage("cliente salvo com sucesso");
		} catch (NegocioException e) 
		{
			FacesUtil.addErrorMessage(e.getMessage());
		}
	}
	
	public void novoContato()
	{
		if(contato == null)
		{
			this.contato = new Contato();
		}else
		{
			this.cliente.getContatos();
		}
	}
	
	public void novoEndereco()
	{
		if(endereco==null)
		{
			this.endereco = new Endereco();
		}else
		{
			this.endereco = getEndereco();
		}
	}

	public void adicionarContato()
	{
		this.cliente.getContatos().add(contato);
		this.contato.setCliente(cliente);
		
	}
	
	public void adicionarEndereco()
	{
		this.cliente.getEnderecos().add(endereco);
		this.endereco.setCliente(cliente);
	}
	public TipoPessoa[] getTipoPessoas()
	{
		return TipoPessoa.values();
	}
	
	public Cliente getCliente() {
		return cliente;
	}

	public void setCliente(Cliente cliente) {
		this.cliente = cliente;
	}

	public Contato getContato() {
		return contato;
	}

	public void setContato(Contato contato) {
		this.contato = contato;
	}

	public Endereco getEndereco() {
		return endereco;
	}

	public void setEndereco(Endereco endereco) {
		this.endereco = endereco;
	}
	
	
	

}
